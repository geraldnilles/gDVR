#!/usr/bin/env python

# Transcoder
#
# This component will implement a ffmpeg while loop.  It will periodically look
# for recordings that need to be transcoded from MPEG2 to h264. 
#
# The current code is not tested.  It will be fully implemented in the 0.2
# version release.  The current code is simply a first draft of how it want to
# format the functions.


import common
import subprocess
import os
import time

class Transcoder:
	def __init__(self):
		self.reset()

	def reset(self):
		self.process = None
		self.infile = None
		self.outfile = None


	def start(self):
		if self.infile == None:
			return True
		# Remove the input extension and replace with mp4
		self.outfile = self.infile.rsplit(".",1)[0]+".mkv"
		
		self.process = subprocess.Popen(["ffmpeg", 
				# Specify Input File
				"-i",self.infile, 
				"-map", "0", # Transcode All Audio tracks
				# Scale to DVD Quality and apply deinterlacin
				"-vf", "yadif,scale=trunc(oh*a/2)*2:480", 
				# Use h264 codec
				"-c:v", "libx264",
				# Use high computation encoding 
				"-preset", "slow", 
				# Use High Quality
				"-crf", "20",
				# Reduce sound to stereo 
				"-ac", "2", 
				"-c:a", "libfdk_aac",
				"-y", # Overwrite all files automatically
				self.outfile],
				stdout = subprocess.DEVNULL,
				stderr = subprocess.DEVNULL
				)

		print ("Transcoding of %s started"%self.infile)	

	def abort(self):
		if self.process == None:
			return True
		if self.process.poll() == None:
			# Transcoding still in progress
			self.process.terminate()
			self.process.wait()
		
		# Remove any outfiles and reset
		os.remove(MPEG_PATH+self.outfile)

		self.reset()
		return True


	def scan(self):
		# Find a file to transcode
		# TODO Randomize the order of the list so that a single
		# problematic file does not hold up the transcoding line
		for f in common.full_path_list("recordings"):
			# Only transcode mpeg files
			if f[-4:] != "mpeg":
				continue

			# Only transcode completed programs
			if ".rec." in f:
				continue

			self.infile = f
			self.start()
			return
			
	def check(self):
		if self.process == None:
			# Nothing Going On, Scan for more work
			self.scan()
			return True
		retcode = self.process.poll()
		if retcode == None:
			# Transcoding in progress
			return True
		else:
			# TODO Analayze return code and dont delete 
			print("Transcoding of %s finished with code %d"
				%(self.infile,retcode))	
			# TODO Move MP4 to a different folder
			os.remove(self.infile)

			# Clear out the transcoder
			self.reset()

if __name__ == "__main__":

	t = Transcoder()

	while(1):
		t.check()
		time.sleep(60)

	

# vim:tw=80
